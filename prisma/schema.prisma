generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String      @id @default(uuid())
  clerkUserId         String      @unique
  firstName           String
  lastName            String
  username            String?
  email               String      @unique
  emailVerified       Boolean     @default(false)
  imageUrl            String?
  userType            UserType
  subscriptionEndDate DateTime?
  createdAt           DateTime    @default(now())
  updatedAt           DateTime    @updatedAt
  SavedJobs           SavedJobs[]
  TrackJobs           TrackJobs[]
}

model Jobs {
  id                   String           @id @default(uuid())
  title                String
  company              String
  location             String
  jobLink              String
  postedDate           String?
  hiringStatus         String?          @default("Actively hiring")
  salary               String?
  keyword              String?
  companyLogoURL       String?
  companyPageURL       String?
  jobType              JobType?
  workMode             WorkMode?
  experienceLevel      ExperienceLevel?
  dataSource           String
  isXPosted            Boolean          @default(false)
  isTelegramPosted     Boolean          @default(false)
  isLinkedInPosted     Boolean          @default(false)
  isInstagramPosted    Boolean          @default(false)
  isSimilarJobsUpdated Boolean          @default(false)
  visitCount           Int              @default(0)
  scrapedAt            String
  updatedAt            DateTime         @updatedAt
  savedJobs            SavedJobs[]
  trackJobs            TrackJobs[]

  @@unique([title, company, location], name: "JobUniqueIndex")
}

model HackerRankJobs {
  id                  String           @id @default(uuid())
  hackerRankJobId     Int
  jobTitle            String
  companyName         String
  jobUrl              String?
  logo                String?
  priority            Int              @default(0)
  country             String?
  state               String?
  city                String?
  skills              String[]
  overallSkills       String[]
  role                String?
  location            String?
  jobType             JobType?
  workMode            WorkMode?
  experienceLevel     ExperienceLevel?
  salary              String?
  experience          String?
  showInJobBoard      Boolean          @default(false)
  companyWebsite      String?
  calendlyLink        String?
  eligibilityCriteria String?
  isEligible          Boolean          @default(false)
  supportsScheduling  Boolean          @default(false)
  wishlisted          Boolean?
  uploadLimitLeft     Int?
  visibilityStartDate DateTime?
  visibilityEndDate   DateTime? // iske pahle ka data main table me nhi save krna hi
  createdAt           DateTime         @default(now())
  updatedAt           DateTime         @updatedAt
  description         String?
  qualifications      String?
  isDetailFetched     Boolean          @default(false)
  isSavedToJob        Boolean          @default(false)

  @@index([hackerRankJobId])
  @@index([companyName, jobTitle, country])
}

model NaukriJobs {
  id               String           @id @default(uuid())
  jobId            String           @unique
  title            String
  jobLink          String
  companyLogo      String?
  company          String
  companyLink      String?
  experience       String?
  location         String
  salary           String?
  postedDateString String?
  postedDate       String?
  jobDescription   String
  skills           String[]
  hiringStatus     String?          @default("Actively hiring")
  keyword          String?
  jobType          JobType?
  workMode         WorkMode?
  experienceLevel  ExperienceLevel?
  scrapedAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  isSavedToJob     Boolean          @default(false)
}

model SavedJobs {
  id          String   @id @default(uuid())
  clerkUserId String
  jobId       String
  savedAt     DateTime @default(now())
  notes       String?
  tags        String[] @default([])
  user        User     @relation(fields: [clerkUserId], references: [clerkUserId])
  jobs        Jobs     @relation(fields: [jobId], references: [id])

  @@unique([clerkUserId, jobId])
}

model TrackJobs {
  id              String         @id @default(uuid())
  clerkUserId     String
  jobId           String
  appliedAt       DateTime       @default(now())
  jobStatus       TrackJobStatus
  statusUpdatedAt DateTime?
  notes           String?
  tags            String[]       @default([])
  user            User           @relation(fields: [clerkUserId], references: [clerkUserId])
  jobs            Jobs           @relation(fields: [jobId], references: [id])

  @@unique([clerkUserId, jobId])
}

model JobsTemp {
  id                   String           @id @default(uuid())
  title                String
  company              String
  location             String
  jobLink              String
  postedDate           String?
  hiringStatus         String?          @default("Actively hiring")
  salary               String?
  keyword              String?
  companyLogoURL       String?
  companyPageURL       String?
  jobType              JobType?
  workMode             WorkMode?
  experienceLevel      ExperienceLevel?
  dataSource           String
  isXPosted            Boolean          @default(false)
  isTelegramPosted     Boolean          @default(false)
  isLinkedInPosted     Boolean          @default(false)
  isInstagramPosted    Boolean          @default(false)
  isSimilarJobsUpdated Boolean          @default(false)
  visitCount           Int              @default(0)
  scrapedAt            String
  updatedAt            DateTime         @updatedAt

  @@unique([title, company, location], name: "JobUniqueIndex")
}

model MetaData {
  id                      String   @id @default(uuid())
  totalJobs               Int
  totalXPostedJobs        Int
  totalSimilarJobsUpdated Int
  createdAt               DateTime @default(now())
}

enum UserType {
  Standard
  Premium
}

enum JobType {
  FullTime
  PartTime
  Internship
}

enum WorkMode {
  Onsite
  Remote
  Hybrid
}

enum ExperienceLevel {
  Internship
  EntryLevel
  Director
  Associate
  SeniorLevel
}

enum TrackJobStatus {
  Applied
  Interviewing
  OfferReceived
  Rejected
  Archived
  NoResponse
}
