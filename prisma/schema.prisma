generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                  String      @id @default(auto()) @map("_id") @db.ObjectId
  clerkUserId         String      @unique
  firstName           String
  lastName            String
  username            String?
  email               String      @unique
  emailVerified       Boolean     @default(false)
  imageUrl            String?
  profileImageUrl     String?
  userType            UserType
  subscriptionEndDate DateTime?
  createdAt           DateTime
  updatedAt           DateTime
  SavedJobs           SavedJobs[]
  TrackJobs           TrackJobs[]
}

model Jobs {
  id                   String           @id @default(auto()) @map("_id") @db.ObjectId
  title                String
  company              String
  location             String
  jobLink              String
  postedDate           String?
  hiringStatus         String?          @default("Actively hiring")
  salary               String?
  keyword              String?
  companyLogoURL       String?
  companyPageURL       String?
  jobType              JobType?
  workMode             WorkMode?
  experienceLevel      ExperienceLevel?
  isXPosted            Boolean          @default(false)
  isTelegramPosted     Boolean          @default(false)
  isLinkedInPosted     Boolean          @default(false)
  isInstagramPosted    Boolean          @default(false)
  isSimilarJobsUpdated Boolean          @default(false)
  visitCount           Int              @default(0)
  scrapedAt            String
  updatedAt            DateTime         @updatedAt

  @@unique([title, company, location], name: "JobUniqueIndex")
}

model SavedJobs {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  clerkUserId String
  jobId       String   @db.ObjectId
  savedAt     DateTime @default(now())
  notes       String?
  tags        String[] @default([])
  user        User     @relation(fields: [clerkUserId], references: [clerkUserId])

  @@unique([clerkUserId, jobId])
}

model TrackJobs {
  id          String         @id @default(auto()) @map("_id") @db.ObjectId
  clerkUserId String
  jobId       String         @db.ObjectId
  appliedAt   DateTime       @default(now())
  jobStatus   TrackJobStatus
  notes       String?
  tags        String[]       @default([])
  user        User           @relation(fields: [clerkUserId], references: [clerkUserId])

  @@unique([clerkUserId, jobId])
}

model JobsTemp {
  id                   String           @id @default(auto()) @map("_id") @db.ObjectId
  title                String
  company              String
  location             String
  jobLink              String
  postedDate           String?
  hiringStatus         String?          @default("Actively hiring")
  salary               String?
  keyword              String?
  companyLogoURL       String?
  companyPageURL       String?
  jobType              JobType?
  workMode             WorkMode?
  experienceLevel      ExperienceLevel?
  isXPosted            Boolean          @default(false)
  isTelegramPosted     Boolean          @default(false)
  isLinkedInPosted     Boolean          @default(false)
  isInstagramPosted    Boolean          @default(false)
  isSimilarJobsUpdated Boolean          @default(false)
  visitCount           Int              @default(0)
  scrapedAt            String
  updatedAt            DateTime         @updatedAt

  @@unique([title, company, location], name: "JobUniqueIndex")
}

model MetaData {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  totalJobs               Int
  totalXPostedJobs        Int
  totalSimilarJobsUpdated Int

  createdAt DateTime @default(now())
}

enum UserType {
  Standard
  Premium
}

enum JobType {
  FullTime
  PartTime
  Internship
}

enum WorkMode {
  Onsite
  Remote
  Hybrid
}

enum ExperienceLevel {
  Internship
  EntryLevel
  Director
  Associate
  SeniorLevel
}

enum TrackJobStatus {
  Applied
  Interviewing
  OfferReceived
  Rejected
  Archived
  NoResponse
}
